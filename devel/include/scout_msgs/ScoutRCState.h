// Generated by gencpp from file scout_msgs/ScoutRCState.msg
// DO NOT EDIT!


#ifndef SCOUT_MSGS_MESSAGE_SCOUTRCSTATE_H
#define SCOUT_MSGS_MESSAGE_SCOUTRCSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace scout_msgs
{
template <class ContainerAllocator>
struct ScoutRCState_
{
  typedef ScoutRCState_<ContainerAllocator> Type;

  ScoutRCState_()
    : swa(0)
    , swb(0)
    , swc(0)
    , swd(0)
    , stick_right_v(0)
    , stick_right_h(0)
    , stick_left_v(0)
    , stick_left_h(0)
    , var_a(0)  {
    }
  ScoutRCState_(const ContainerAllocator& _alloc)
    : swa(0)
    , swb(0)
    , swc(0)
    , swd(0)
    , stick_right_v(0)
    , stick_right_h(0)
    , stick_left_v(0)
    , stick_left_h(0)
    , var_a(0)  {
  (void)_alloc;
    }



   typedef uint8_t _swa_type;
  _swa_type swa;

   typedef uint8_t _swb_type;
  _swb_type swb;

   typedef uint8_t _swc_type;
  _swc_type swc;

   typedef uint8_t _swd_type;
  _swd_type swd;

   typedef int8_t _stick_right_v_type;
  _stick_right_v_type stick_right_v;

   typedef int8_t _stick_right_h_type;
  _stick_right_h_type stick_right_h;

   typedef int8_t _stick_left_v_type;
  _stick_left_v_type stick_left_v;

   typedef int8_t _stick_left_h_type;
  _stick_left_h_type stick_left_h;

   typedef int8_t _var_a_type;
  _var_a_type var_a;





  typedef boost::shared_ptr< ::scout_msgs::ScoutRCState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::scout_msgs::ScoutRCState_<ContainerAllocator> const> ConstPtr;

}; // struct ScoutRCState_

typedef ::scout_msgs::ScoutRCState_<std::allocator<void> > ScoutRCState;

typedef boost::shared_ptr< ::scout_msgs::ScoutRCState > ScoutRCStatePtr;
typedef boost::shared_ptr< ::scout_msgs::ScoutRCState const> ScoutRCStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::scout_msgs::ScoutRCState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::scout_msgs::ScoutRCState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::scout_msgs::ScoutRCState_<ContainerAllocator1> & lhs, const ::scout_msgs::ScoutRCState_<ContainerAllocator2> & rhs)
{
  return lhs.swa == rhs.swa &&
    lhs.swb == rhs.swb &&
    lhs.swc == rhs.swc &&
    lhs.swd == rhs.swd &&
    lhs.stick_right_v == rhs.stick_right_v &&
    lhs.stick_right_h == rhs.stick_right_h &&
    lhs.stick_left_v == rhs.stick_left_v &&
    lhs.stick_left_h == rhs.stick_left_h &&
    lhs.var_a == rhs.var_a;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::scout_msgs::ScoutRCState_<ContainerAllocator1> & lhs, const ::scout_msgs::ScoutRCState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace scout_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::scout_msgs::ScoutRCState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scout_msgs::ScoutRCState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scout_msgs::ScoutRCState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scout_msgs::ScoutRCState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scout_msgs::ScoutRCState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scout_msgs::ScoutRCState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::scout_msgs::ScoutRCState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c78447ebdf8846481ba608e1b4be107c";
  }

  static const char* value(const ::scout_msgs::ScoutRCState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc78447ebdf884648ULL;
  static const uint64_t static_value2 = 0x1ba608e1b4be107cULL;
};

template<class ContainerAllocator>
struct DataType< ::scout_msgs::ScoutRCState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "scout_msgs/ScoutRCState";
  }

  static const char* value(const ::scout_msgs::ScoutRCState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::scout_msgs::ScoutRCState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 swa\n"
"uint8 swb\n"
"uint8 swc\n"
"uint8 swd\n"
"\n"
"int8 stick_right_v\n"
"int8 stick_right_h\n"
"int8 stick_left_v\n"
"int8 stick_left_h\n"
"int8 var_a\n"
;
  }

  static const char* value(const ::scout_msgs::ScoutRCState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::scout_msgs::ScoutRCState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.swa);
      stream.next(m.swb);
      stream.next(m.swc);
      stream.next(m.swd);
      stream.next(m.stick_right_v);
      stream.next(m.stick_right_h);
      stream.next(m.stick_left_v);
      stream.next(m.stick_left_h);
      stream.next(m.var_a);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ScoutRCState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::scout_msgs::ScoutRCState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::scout_msgs::ScoutRCState_<ContainerAllocator>& v)
  {
    s << indent << "swa: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.swa);
    s << indent << "swb: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.swb);
    s << indent << "swc: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.swc);
    s << indent << "swd: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.swd);
    s << indent << "stick_right_v: ";
    Printer<int8_t>::stream(s, indent + "  ", v.stick_right_v);
    s << indent << "stick_right_h: ";
    Printer<int8_t>::stream(s, indent + "  ", v.stick_right_h);
    s << indent << "stick_left_v: ";
    Printer<int8_t>::stream(s, indent + "  ", v.stick_left_v);
    s << indent << "stick_left_h: ";
    Printer<int8_t>::stream(s, indent + "  ", v.stick_left_h);
    s << indent << "var_a: ";
    Printer<int8_t>::stream(s, indent + "  ", v.var_a);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SCOUT_MSGS_MESSAGE_SCOUTRCSTATE_H
